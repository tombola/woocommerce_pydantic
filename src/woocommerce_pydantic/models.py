# generated by datamodel-codegen:
#   filename:  woocommerce-openapi-3.0.x.yml
#   timestamp: 2025-01-27T21:38:59+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, EmailStr, Field


class DiscountType(Enum):
    percent = 'percent'
    fixed_cart = 'fixed_cart'
    fixed_product = 'fixed_product'


class MetaDatum(BaseModel):
    id: Optional[int] = Field(None, description='Meta ID.')
    key: Optional[str] = Field(None, description='Meta key.')
    value: Optional[Union[str, Dict[str, Any]]] = Field(None, description='Meta value.')


class ShopCoupon(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the object.')
    code: Optional[str] = Field(None, description='Coupon code.')
    amount: Optional[str] = Field(
        None,
        description='The amount of discount. Should always be numeric, even if setting a percentage.',
    )
    date_created: Optional[str] = Field(
        None, description="The date the coupon was created, in the site's timezone."
    )
    date_created_gmt: Optional[str] = Field(
        None, description='The date the coupon was created, as GMT.'
    )
    date_modified: Optional[str] = Field(
        None,
        description="The date the coupon was last modified, in the site's timezone.",
    )
    date_modified_gmt: Optional[str] = Field(
        None, description='The date the coupon was last modified, as GMT.'
    )
    discount_type: Optional[DiscountType] = Field(
        None, description='Determines the type of discount that will be applied.'
    )
    description: Optional[str] = Field(None, description='Coupon description.')
    date_expires: Optional[str] = Field(
        None, description="The date the coupon expires, in the site's timezone."
    )
    date_expires_gmt: Optional[str] = Field(
        None, description='The date the coupon expires, as GMT.'
    )
    usage_count: Optional[int] = Field(
        None, description='Number of times the coupon has been used already.'
    )
    individual_use: Optional[bool] = Field(
        None,
        description='If true, the coupon can only be used individually. Other applied coupons will be removed from the cart.',
    )
    product_ids: Optional[List[int]] = Field(
        None, description='List of product IDs the coupon can be used on.'
    )
    excluded_product_ids: Optional[List[int]] = Field(
        None, description='List of product IDs the coupon cannot be used on.'
    )
    usage_limit: Optional[int] = Field(
        None, description='How many times the coupon can be used in total.'
    )
    usage_limit_per_user: Optional[int] = Field(
        None, description='How many times the coupon can be used per customer.'
    )
    limit_usage_to_x_items: Optional[int] = Field(
        None,
        description='Max number of items in the cart the coupon can be applied to.',
    )
    free_shipping: Optional[bool] = Field(
        None,
        description='If true and if the free shipping method requires a coupon, this coupon will enable free shipping.',
    )
    product_categories: Optional[List[int]] = Field(
        None, description='List of category IDs the coupon applies to.'
    )
    excluded_product_categories: Optional[List[int]] = Field(
        None, description='List of category IDs the coupon does not apply to.'
    )
    exclude_sale_items: Optional[bool] = Field(
        None,
        description='If true, this coupon will not be applied to items that have sale prices.',
    )
    minimum_amount: Optional[str] = Field(
        None,
        description='Minimum order amount that needs to be in the cart before coupon applies.',
    )
    maximum_amount: Optional[str] = Field(
        None, description='Maximum order amount allowed when using the coupon.'
    )
    email_restrictions: Optional[List[str]] = Field(
        None, description='List of email addresses that can use this coupon.'
    )
    used_by: Optional[List[int]] = Field(
        None,
        description='List of user IDs (or guest email addresses) that have used the coupon.',
    )
    meta_data: Optional[List[MetaDatum]] = Field(None, description='Meta data.')


class File(BaseModel):
    name: Optional[str] = Field(None, description='File name.')
    file: Optional[str] = Field(None, description='File URL.')


class CustomerDownload(BaseModel):
    download_id: Optional[str] = Field(None, description='Download ID.')
    download_url: Optional[str] = Field(None, description='Download file URL.')
    product_id: Optional[int] = Field(None, description='Downloadable product ID.')
    product_name: Optional[str] = Field(None, description='Product name.')
    download_name: Optional[str] = Field(None, description='Downloadable file name.')
    order_id: Optional[int] = Field(None, description='Order ID.')
    order_key: Optional[str] = Field(None, description='Order key.')
    downloads_remaining: Optional[str] = Field(
        None, description='Number of downloads remaining.'
    )
    access_expires: Optional[str] = Field(
        None,
        description="The date when download access expires, in the site's timezone.",
    )
    access_expires_gmt: Optional[str] = Field(
        None, description='The date when download access expires, as GMT.'
    )
    file: Optional[File] = Field(None, description='File details.')


class Billing(BaseModel):
    first_name: Optional[str] = Field(None, description='First name.')
    last_name: Optional[str] = Field(None, description='Last name.')
    company: Optional[str] = Field(None, description='Company name.')
    address_1: Optional[str] = Field(None, description='Address line 1')
    address_2: Optional[str] = Field(None, description='Address line 2')
    city: Optional[str] = Field(None, description='City name.')
    state: Optional[str] = Field(
        None, description='ISO code or name of the state, province or district.'
    )
    postcode: Optional[str] = Field(None, description='Postal code.')
    country: Optional[str] = Field(None, description='ISO code of the country.')
    email: Optional[EmailStr] = Field(None, description='Email address.')
    phone: Optional[str] = Field(None, description='Phone number.')


class Shipping(BaseModel):
    first_name: Optional[str] = Field(None, description='First name.')
    last_name: Optional[str] = Field(None, description='Last name.')
    company: Optional[str] = Field(None, description='Company name.')
    address_1: Optional[str] = Field(None, description='Address line 1')
    address_2: Optional[str] = Field(None, description='Address line 2')
    city: Optional[str] = Field(None, description='City name.')
    state: Optional[str] = Field(
        None, description='ISO code or name of the state, province or district.'
    )
    postcode: Optional[str] = Field(None, description='Postal code.')
    country: Optional[str] = Field(None, description='ISO code of the country.')
    phone: Optional[str] = Field(None, description='Phone number.')


class Customer(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    date_created: Optional[str] = Field(
        None, description="The date the customer was created, in the site's timezone."
    )
    date_created_gmt: Optional[str] = Field(
        None, description='The date the customer was created, as GMT.'
    )
    date_modified: Optional[str] = Field(
        None,
        description="The date the customer was last modified, in the site's timezone.",
    )
    date_modified_gmt: Optional[str] = Field(
        None, description='The date the customer was last modified, as GMT.'
    )
    email: Optional[EmailStr] = Field(
        None, description='The email address for the customer.'
    )
    first_name: Optional[str] = Field(None, description='Customer first name.')
    last_name: Optional[str] = Field(None, description='Customer last name.')
    role: Optional[str] = Field(None, description='Customer role.')
    username: Optional[str] = Field(None, description='Customer login name.')
    password: Optional[str] = Field(None, description='Customer password.')
    billing: Optional[Billing] = Field(
        None, description='List of billing address data.'
    )
    shipping: Optional[Shipping] = Field(
        None, description='List of shipping address data.'
    )
    is_paying_customer: Optional[bool] = Field(
        None, description='Is the customer a paying customer?'
    )
    avatar_url: Optional[str] = Field(None, description='Avatar URL.')
    meta_data: Optional[List[MetaDatum]] = Field(None, description='Meta data.')


class OrderNote(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    author: Optional[str] = Field(None, description='Order note author.')
    date_created: Optional[str] = Field(
        None, description="The date the order note was created, in the site's timezone."
    )
    date_created_gmt: Optional[str] = Field(
        None, description='The date the order note was created, as GMT.'
    )
    note: Optional[str] = Field(None, description='Order note content.')
    customer_note: Optional[bool] = Field(
        None,
        description='If true, the note will be shown to customers and they will be notified. If false, the note will be for admin reference only.',
    )
    added_by_user: Optional[bool] = Field(
        None,
        description='If true, this note will be attributed to the current user. If false, the note will be attributed to the system.',
    )


class Tax(BaseModel):
    id: Optional[int] = Field(None, description='Tax rate ID.')
    total: Optional[str] = Field(None, description='Tax total.')
    subtotal: Optional[str] = Field(None, description='Tax subtotal.')
    refund_total: Optional[float] = Field(
        None, description='Amount that will be refunded for this tax.'
    )


class LineItem(BaseModel):
    id: Optional[int] = Field(None, description='Item ID.')
    name: Optional[str] = Field(None, description='Product name.')
    product_id: Optional[int] = Field(None, description='Product ID.')
    variation_id: Optional[int] = Field(
        None, description='Variation ID, if applicable.'
    )
    quantity: Optional[int] = Field(None, description='Quantity ordered.')
    tax_class: Optional[str] = Field(None, description='Tax class of product.')
    subtotal: Optional[str] = Field(
        None, description='Line subtotal (before discounts).'
    )
    subtotal_tax: Optional[str] = Field(
        None, description='Line subtotal tax (before discounts).'
    )
    total: Optional[str] = Field(None, description='Line total (after discounts).')
    total_tax: Optional[str] = Field(
        None, description='Line total tax (after discounts).'
    )
    taxes: Optional[List[Tax]] = Field(None, description='Line taxes.')
    meta_data: Optional[List[MetaDatum]] = Field(None, description='Meta data.')
    sku: Optional[str] = Field(None, description='Product SKU.')
    price: Optional[float] = Field(None, description='Product price.')
    refund_total: Optional[float] = Field(
        None,
        description='Amount that will be refunded for this line item (excluding taxes).',
    )


class ShopOrderRefund(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    date_created: Optional[str] = Field(
        None,
        description="The date the order refund was created, in the site's timezone.",
    )
    date_created_gmt: Optional[str] = Field(
        None, description='The date the order refund was created, as GMT.'
    )
    amount: Optional[str] = Field(None, description='Refund amount.')
    reason: Optional[str] = Field(None, description='Reason for refund.')
    refunded_by: Optional[int] = Field(
        None, description='User ID of user who created the refund.'
    )
    refunded_payment: Optional[bool] = Field(
        None, description='If the payment was refunded via the API.'
    )
    meta_data: Optional[List[MetaDatum]] = Field(None, description='Meta data.')
    line_items: Optional[List[LineItem]] = Field(None, description='Line items data.')
    api_refund: Optional[bool] = Field(
        None,
        description='When true, the payment gateway API is used to generate the refund.',
    )
    api_restock: Optional[bool] = Field(
        None, description='When true, refunded items are restocked.'
    )


class Status(Enum):
    pending = 'pending'
    processing = 'processing'
    on_hold = 'on-hold'
    completed = 'completed'
    cancelled = 'cancelled'
    refunded = 'refunded'
    failed = 'failed'


class Currency(Enum):
    AED = 'AED'
    AFN = 'AFN'
    ALL = 'ALL'
    AMD = 'AMD'
    ANG = 'ANG'
    AOA = 'AOA'
    ARS = 'ARS'
    AUD = 'AUD'
    AWG = 'AWG'
    AZN = 'AZN'
    BAM = 'BAM'
    BBD = 'BBD'
    BDT = 'BDT'
    BGN = 'BGN'
    BHD = 'BHD'
    BIF = 'BIF'
    BMD = 'BMD'
    BND = 'BND'
    BOB = 'BOB'
    BRL = 'BRL'
    BSD = 'BSD'
    BTC = 'BTC'
    BTN = 'BTN'
    BWP = 'BWP'
    BYR = 'BYR'
    BYN = 'BYN'
    BZD = 'BZD'
    CAD = 'CAD'
    CDF = 'CDF'
    CHF = 'CHF'
    CLP = 'CLP'
    CNY = 'CNY'
    COP = 'COP'
    CRC = 'CRC'
    CUC = 'CUC'
    CUP = 'CUP'
    CVE = 'CVE'
    CZK = 'CZK'
    DJF = 'DJF'
    DKK = 'DKK'
    DOP = 'DOP'
    DZD = 'DZD'
    EGP = 'EGP'
    ERN = 'ERN'
    ETB = 'ETB'
    EUR = 'EUR'
    FJD = 'FJD'
    FKP = 'FKP'
    GBP = 'GBP'
    GEL = 'GEL'
    GGP = 'GGP'
    GHS = 'GHS'
    GIP = 'GIP'
    GMD = 'GMD'
    GNF = 'GNF'
    GTQ = 'GTQ'
    GYD = 'GYD'
    HKD = 'HKD'
    HNL = 'HNL'
    HRK = 'HRK'
    HTG = 'HTG'
    HUF = 'HUF'
    IDR = 'IDR'
    ILS = 'ILS'
    IMP = 'IMP'
    INR = 'INR'
    IQD = 'IQD'
    IRR = 'IRR'
    IRT = 'IRT'
    ISK = 'ISK'
    JEP = 'JEP'
    JMD = 'JMD'
    JOD = 'JOD'
    JPY = 'JPY'
    KES = 'KES'
    KGS = 'KGS'
    KHR = 'KHR'
    KMF = 'KMF'
    KPW = 'KPW'
    KRW = 'KRW'
    KWD = 'KWD'
    KYD = 'KYD'
    KZT = 'KZT'
    LAK = 'LAK'
    LBP = 'LBP'
    LKR = 'LKR'
    LRD = 'LRD'
    LSL = 'LSL'
    LYD = 'LYD'
    MAD = 'MAD'
    MDL = 'MDL'
    MGA = 'MGA'
    MKD = 'MKD'
    MMK = 'MMK'
    MNT = 'MNT'
    MOP = 'MOP'
    MRU = 'MRU'
    MUR = 'MUR'
    MVR = 'MVR'
    MWK = 'MWK'
    MXN = 'MXN'
    MYR = 'MYR'
    MZN = 'MZN'
    NAD = 'NAD'
    NGN = 'NGN'
    NIO = 'NIO'
    NOK = 'NOK'
    NPR = 'NPR'
    NZD = 'NZD'
    OMR = 'OMR'
    PAB = 'PAB'
    PEN = 'PEN'
    PGK = 'PGK'
    PHP = 'PHP'
    PKR = 'PKR'
    PLN = 'PLN'
    PRB = 'PRB'
    PYG = 'PYG'
    QAR = 'QAR'
    RON = 'RON'
    RSD = 'RSD'
    RUB = 'RUB'
    RWF = 'RWF'
    SAR = 'SAR'
    SBD = 'SBD'
    SCR = 'SCR'
    SDG = 'SDG'
    SEK = 'SEK'
    SGD = 'SGD'
    SHP = 'SHP'
    SLL = 'SLL'
    SOS = 'SOS'
    SRD = 'SRD'
    SSP = 'SSP'
    STN = 'STN'
    SYP = 'SYP'
    SZL = 'SZL'
    THB = 'THB'
    TJS = 'TJS'
    TMT = 'TMT'
    TND = 'TND'
    TOP = 'TOP'
    TRY = 'TRY'
    TTD = 'TTD'
    TWD = 'TWD'
    TZS = 'TZS'
    UAH = 'UAH'
    UGX = 'UGX'
    USD = 'USD'
    UYU = 'UYU'
    UZS = 'UZS'
    VEF = 'VEF'
    VES = 'VES'
    VND = 'VND'
    VUV = 'VUV'
    WST = 'WST'
    XAF = 'XAF'
    XCD = 'XCD'
    XOF = 'XOF'
    XPF = 'XPF'
    YER = 'YER'
    ZAR = 'ZAR'
    ZMW = 'ZMW'


class Billing1(BaseModel):
    first_name: Optional[str] = Field(None, description='First name.')
    last_name: Optional[str] = Field(None, description='Last name.')
    company: Optional[str] = Field(None, description='Company name.')
    address_1: Optional[str] = Field(None, description='Address line 1')
    address_2: Optional[str] = Field(None, description='Address line 2')
    city: Optional[str] = Field(None, description='City name.')
    state: Optional[str] = Field(
        None, description='ISO code or name of the state, province or district.'
    )
    postcode: Optional[str] = Field(None, description='Postal code.')
    country: Optional[str] = Field(
        None, description='Country code in ISO 3166-1 alpha-2 format.'
    )
    email: Optional[EmailStr] = Field(None, description='Email address.')
    phone: Optional[str] = Field(None, description='Phone number.')


class Shipping1(BaseModel):
    first_name: Optional[str] = Field(None, description='First name.')
    last_name: Optional[str] = Field(None, description='Last name.')
    company: Optional[str] = Field(None, description='Company name.')
    address_1: Optional[str] = Field(None, description='Address line 1')
    address_2: Optional[str] = Field(None, description='Address line 2')
    city: Optional[str] = Field(None, description='City name.')
    state: Optional[str] = Field(
        None, description='ISO code or name of the state, province or district.'
    )
    postcode: Optional[str] = Field(None, description='Postal code.')
    country: Optional[str] = Field(
        None, description='Country code in ISO 3166-1 alpha-2 format.'
    )


class Tax1(BaseModel):
    id: Optional[int] = Field(None, description='Tax rate ID.')
    total: Optional[str] = Field(None, description='Tax total.')
    subtotal: Optional[str] = Field(None, description='Tax subtotal.')


class MetaDatum5(BaseModel):
    id: Optional[int] = Field(None, description='Meta ID.')
    key: Optional[str] = Field(None, description='Meta key.')
    value: Optional[Union[str, Dict[str, Any]]] = Field(None, description='Meta value.')
    display_key: Optional[str] = Field(None, description='Meta key for UI display.')
    display_value: Optional[str] = Field(None, description='Meta value for UI display.')


class LineItem1(BaseModel):
    id: Optional[int] = Field(None, description='Item ID.')
    name: Optional[str] = Field(None, description='Product name.')
    parent_name: Optional[str] = Field(
        None, description='Parent product name if the product is a variation.'
    )
    product_id: Optional[int] = Field(None, description='Product ID.')
    variation_id: Optional[int] = Field(
        None, description='Variation ID, if applicable.'
    )
    quantity: Optional[int] = Field(None, description='Quantity ordered.')
    tax_class: Optional[str] = Field(None, description='Tax class of product.')
    subtotal: Optional[str] = Field(
        None, description='Line subtotal (before discounts).'
    )
    subtotal_tax: Optional[str] = Field(
        None, description='Line subtotal tax (before discounts).'
    )
    total: Optional[str] = Field(None, description='Line total (after discounts).')
    total_tax: Optional[str] = Field(
        None, description='Line total tax (after discounts).'
    )
    taxes: Optional[List[Tax1]] = Field(None, description='Line taxes.')
    meta_data: Optional[List[MetaDatum5]] = Field(None, description='Meta data.')
    sku: Optional[str] = Field(None, description='Product SKU.')
    price: Optional[float] = Field(None, description='Product price.')


class MetaDatum6(BaseModel):
    id: Optional[int] = Field(None, description='Meta ID.')
    key: Optional[str] = Field(None, description='Meta key.')
    value: Optional[Union[str, Dict[str, Any]]] = Field(None, description='Meta value.')


class TaxLine(BaseModel):
    id: Optional[int] = Field(None, description='Item ID.')
    rate_code: Optional[str] = Field(None, description='Tax rate code.')
    rate_id: Optional[int] = Field(None, description='Tax rate ID.')
    label: Optional[str] = Field(None, description='Tax rate label.')
    compound: Optional[bool] = Field(
        None, description='Show if is a compound tax rate.'
    )
    tax_total: Optional[str] = Field(
        None, description='Tax total (not including shipping taxes).'
    )
    shipping_tax_total: Optional[str] = Field(None, description='Shipping tax total.')
    meta_data: Optional[List[MetaDatum6]] = Field(None, description='Meta data.')


class Tax2(BaseModel):
    id: Optional[int] = Field(None, description='Tax rate ID.')
    total: Optional[str] = Field(None, description='Tax total.')


class ShippingLine(BaseModel):
    id: Optional[int] = Field(None, description='Item ID.')
    method_title: Optional[str] = Field(None, description='Shipping method name.')
    method_id: Optional[str] = Field(None, description='Shipping method ID.')
    instance_id: Optional[str] = Field(None, description='Shipping instance ID.')
    total: Optional[str] = Field(None, description='Line total (after discounts).')
    total_tax: Optional[str] = Field(
        None, description='Line total tax (after discounts).'
    )
    taxes: Optional[List[Tax2]] = Field(None, description='Line taxes.')
    meta_data: Optional[List[MetaDatum6]] = Field(None, description='Meta data.')


class TaxStatus(Enum):
    taxable = 'taxable'
    none = 'none'


class Tax3(BaseModel):
    id: Optional[int] = Field(None, description='Tax rate ID.')
    total: Optional[str] = Field(None, description='Tax total.')
    subtotal: Optional[str] = Field(None, description='Tax subtotal.')


class FeeLine(BaseModel):
    id: Optional[int] = Field(None, description='Item ID.')
    name: Optional[str] = Field(None, description='Fee name.')
    tax_class: Optional[str] = Field(None, description='Tax class of fee.')
    tax_status: Optional[TaxStatus] = Field(None, description='Tax status of fee.')
    total: Optional[str] = Field(None, description='Line total (after discounts).')
    total_tax: Optional[str] = Field(
        None, description='Line total tax (after discounts).'
    )
    taxes: Optional[List[Tax3]] = Field(None, description='Line taxes.')
    meta_data: Optional[List[MetaDatum6]] = Field(None, description='Meta data.')


class CouponLine(BaseModel):
    id: Optional[int] = Field(None, description='Item ID.')
    code: Optional[str] = Field(None, description='Coupon code.')
    discount: Optional[str] = Field(None, description='Discount total.')
    discount_tax: Optional[str] = Field(None, description='Discount total tax.')
    meta_data: Optional[List[MetaDatum6]] = Field(None, description='Meta data.')


class Refund(BaseModel):
    id: Optional[int] = Field(None, description='Refund ID.')
    reason: Optional[str] = Field(None, description='Refund reason.')
    total: Optional[str] = Field(None, description='Refund total.')


class ShopOrder(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    parent_id: Optional[int] = Field(None, description='Parent order ID.')
    number: Optional[str] = Field(None, description='Order number.')
    order_key: Optional[str] = Field(None, description='Order key.')
    created_via: Optional[str] = Field(
        None, description='Shows where the order was created.'
    )
    version: Optional[str] = Field(
        None, description='Version of WooCommerce which last updated the order.'
    )
    status: Optional[Status] = Field(None, description='Order status.')
    currency: Optional[Currency] = Field(
        None, description='Currency the order was created with, in ISO format.'
    )
    date_created: Optional[str] = Field(
        None, description="The date the order was created, in the site's timezone."
    )
    date_created_gmt: Optional[str] = Field(
        None, description='The date the order was created, as GMT.'
    )
    date_modified: Optional[str] = Field(
        None,
        description="The date the order was last modified, in the site's timezone.",
    )
    date_modified_gmt: Optional[str] = Field(
        None, description='The date the order was last modified, as GMT.'
    )
    discount_total: Optional[str] = Field(
        None, description='Total discount amount for the order.'
    )
    discount_tax: Optional[str] = Field(
        None, description='Total discount tax amount for the order.'
    )
    shipping_total: Optional[str] = Field(
        None, description='Total shipping amount for the order.'
    )
    shipping_tax: Optional[str] = Field(
        None, description='Total shipping tax amount for the order.'
    )
    cart_tax: Optional[str] = Field(None, description='Sum of line item taxes only.')
    total: Optional[str] = Field(None, description='Grand total.')
    total_tax: Optional[str] = Field(None, description='Sum of all taxes.')
    prices_include_tax: Optional[bool] = Field(
        None, description='True the prices included tax during checkout.'
    )
    customer_id: Optional[int] = Field(
        None, description='User ID who owns the order. 0 for guests.'
    )
    customer_ip_address: Optional[str] = Field(
        None, description="Customer's IP address."
    )
    customer_user_agent: Optional[str] = Field(
        None, description='User agent of the customer.'
    )
    customer_note: Optional[str] = Field(
        None, description='Note left by customer during checkout.'
    )
    billing: Optional[Billing1] = Field(None, description='Billing address.')
    shipping: Optional[Shipping1] = Field(None, description='Shipping address.')
    payment_method: Optional[str] = Field(None, description='Payment method ID.')
    payment_method_title: Optional[str] = Field(
        None, description='Payment method title.'
    )
    transaction_id: Optional[str] = Field(None, description='Unique transaction ID.')
    date_paid: Optional[str] = Field(
        None, description="The date the order was paid, in the site's timezone."
    )
    date_paid_gmt: Optional[str] = Field(
        None, description='The date the order was paid, as GMT.'
    )
    date_completed: Optional[str] = Field(
        None, description="The date the order was completed, in the site's timezone."
    )
    date_completed_gmt: Optional[str] = Field(
        None, description='The date the order was completed, as GMT.'
    )
    cart_hash: Optional[str] = Field(
        None, description='MD5 hash of cart items to ensure orders are not modified.'
    )
    meta_data: Optional[List[MetaDatum]] = Field(None, description='Meta data.')
    line_items: Optional[List[LineItem1]] = Field(None, description='Line items data.')
    tax_lines: Optional[List[TaxLine]] = Field(None, description='Tax lines data.')
    shipping_lines: Optional[List[ShippingLine]] = Field(
        None, description='Shipping lines data.'
    )
    fee_lines: Optional[List[FeeLine]] = Field(None, description='Fee lines data.')
    coupon_lines: Optional[List[CouponLine]] = Field(
        None, description='Coupons line data.'
    )
    refunds: Optional[List[Refund]] = Field(None, description='List of refunds.')
    set_paid: Optional[bool] = Field(
        None,
        description='Define if the order is paid. It will set the status to processing and reduce stock items.',
    )


class ProductAttributeTerm(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    name: Optional[str] = Field(None, description='Term name.')
    slug: Optional[str] = Field(
        None,
        description='An alphanumeric identifier for the resource unique to its type.',
    )
    description: Optional[str] = Field(
        None, description='HTML description of the resource.'
    )
    menu_order: Optional[int] = Field(
        None, description='Menu order, used to custom sort the resource.'
    )
    count: Optional[int] = Field(
        None, description='Number of published products for the resource.'
    )


class Type(Enum):
    select = 'select'


class OrderBy(Enum):
    menu_order = 'menu_order'
    name = 'name'
    name_num = 'name_num'
    id = 'id'


class ProductAttribute(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    name: Optional[str] = Field(None, description='Attribute name.')
    slug: Optional[str] = Field(
        None,
        description='An alphanumeric identifier for the resource unique to its type.',
    )
    type: Optional[Type] = Field(None, description='Type of attribute.')
    order_by: Optional[OrderBy] = Field(None, description='Default sort order.')
    has_archives: Optional[bool] = Field(
        None, description='Enable/Disable attribute archives.'
    )


class Display(Enum):
    default = 'default'
    products = 'products'
    subcategories = 'subcategories'
    both = 'both'


class Image(BaseModel):
    id: Optional[int] = Field(None, description='Image ID.')
    date_created: Optional[str] = Field(
        None, description="The date the image was created, in the site's timezone."
    )
    date_created_gmt: Optional[str] = Field(
        None, description='The date the image was created, as GMT.'
    )
    date_modified: Optional[str] = Field(
        None,
        description="The date the image was last modified, in the site's timezone.",
    )
    date_modified_gmt: Optional[str] = Field(
        None, description='The date the image was last modified, as GMT.'
    )
    src: Optional[AnyUrl] = Field(None, description='Image URL.')
    name: Optional[str] = Field(None, description='Image name.')
    alt: Optional[str] = Field(None, description='Image alternative text.')


class ProductCat(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    name: Optional[str] = Field(None, description='Category name.')
    slug: Optional[str] = Field(
        None,
        description='An alphanumeric identifier for the resource unique to its type.',
    )
    parent: Optional[int] = Field(
        None, description='The ID for the parent of the resource.'
    )
    description: Optional[str] = Field(
        None, description='HTML description of the resource.'
    )
    display: Optional[Display] = Field(
        None, description='Category archive display type.'
    )
    image: Optional[Image] = Field(None, description='Image data.')
    menu_order: Optional[int] = Field(
        None, description='Menu order, used to custom sort the resource.'
    )
    count: Optional[int] = Field(
        None, description='Number of published products for the resource.'
    )


class Status1(Enum):
    approved = 'approved'
    hold = 'hold'
    spam = 'spam'
    unspam = 'unspam'
    trash = 'trash'
    untrash = 'untrash'


class ReviewerAvatarUrls(BaseModel):
    field_24: Optional[AnyUrl] = Field(
        None, alias='24', description='Avatar URL with image size of 24 pixels.'
    )
    field_48: Optional[AnyUrl] = Field(
        None, alias='48', description='Avatar URL with image size of 48 pixels.'
    )
    field_96: Optional[AnyUrl] = Field(
        None, alias='96', description='Avatar URL with image size of 96 pixels.'
    )


class ProductReview(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    date_created: Optional[str] = Field(
        None, description="The date the review was created, in the site's timezone."
    )
    date_created_gmt: Optional[str] = Field(
        None, description='The date the review was created, as GMT.'
    )
    product_id: Optional[int] = Field(
        None,
        description='Unique identifier for the product that the review belongs to.',
    )
    status: Optional[Status1] = Field(None, description='Status of the review.')
    reviewer: Optional[str] = Field(None, description='Reviewer name.')
    reviewer_email: Optional[EmailStr] = Field(None, description='Reviewer email.')
    review: Optional[str] = Field(None, description='The content of the review.')
    rating: Optional[int] = Field(None, description='Review rating (0 to 5).')
    verified: Optional[bool] = Field(
        None, description='Shows if the reviewer bought the product or not.'
    )
    reviewer_avatar_urls: Optional[ReviewerAvatarUrls] = Field(
        None, description='Avatar URLs for the object reviewer.'
    )


class ProductShippingClass(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    name: Optional[str] = Field(None, description='Shipping class name.')
    slug: Optional[str] = Field(
        None,
        description='An alphanumeric identifier for the resource unique to its type.',
    )
    description: Optional[str] = Field(
        None, description='HTML description of the resource.'
    )
    count: Optional[int] = Field(
        None, description='Number of published products for the resource.'
    )


class ProductTag(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    name: Optional[str] = Field(None, description='Tag name.')
    slug: Optional[str] = Field(
        None,
        description='An alphanumeric identifier for the resource unique to its type.',
    )
    description: Optional[str] = Field(
        None, description='HTML description of the resource.'
    )
    count: Optional[int] = Field(
        None, description='Number of published products for the resource.'
    )


class Type1(Enum):
    simple = 'simple'
    grouped = 'grouped'
    external = 'external'
    variable = 'variable'


class Status2(Enum):
    draft = 'draft'
    pending = 'pending'
    private = 'private'
    publish = 'publish'
    future = 'future'


class CatalogVisibility(Enum):
    visible = 'visible'
    catalog = 'catalog'
    search = 'search'
    hidden = 'hidden'


class Download(BaseModel):
    id: Optional[str] = Field(None, description='File ID.')
    name: Optional[str] = Field(None, description='File name.')
    file: Optional[str] = Field(None, description='File URL.')


class TaxStatus1(Enum):
    taxable = 'taxable'
    shipping = 'shipping'
    none = 'none'


class StockStatus(Enum):
    instock = 'instock'
    outofstock = 'outofstock'
    onbackorder = 'onbackorder'


class Backorders(Enum):
    no = 'no'
    notify = 'notify'
    yes = 'yes'


class Dimensions(BaseModel):
    length: Optional[str] = Field(None, description='Product length (cm).')
    width: Optional[str] = Field(None, description='Product width (cm).')
    height: Optional[str] = Field(None, description='Product height (cm).')


class Category(BaseModel):
    id: Optional[int] = Field(None, description='Category ID.')
    name: Optional[str] = Field(None, description='Category name.')
    slug: Optional[str] = Field(None, description='Category slug.')


class Tag(BaseModel):
    id: Optional[int] = Field(None, description='Tag ID.')
    name: Optional[str] = Field(None, description='Tag name.')
    slug: Optional[str] = Field(None, description='Tag slug.')


class Attribute(BaseModel):
    id: Optional[int] = Field(None, description='Attribute ID.')
    name: Optional[str] = Field(None, description='Attribute name.')
    position: Optional[int] = Field(None, description='Attribute position.')
    visible: Optional[bool] = Field(
        None,
        description='Define if the attribute is visible on the "Additional information" tab in the product\'s page.',
    )
    variation: Optional[bool] = Field(
        None, description='Define if the attribute can be used as variation.'
    )
    options: Optional[List[str]] = Field(
        None, description='List of available term names of the attribute.'
    )


class DefaultAttribute(BaseModel):
    id: Optional[int] = Field(None, description='Attribute ID.')
    name: Optional[str] = Field(None, description='Attribute name.')
    option: Optional[str] = Field(None, description='Selected attribute term name.')


class Product(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    name: Optional[str] = Field(None, description='Product name.')
    slug: Optional[str] = Field(None, description='Product slug.')
    permalink: Optional[AnyUrl] = Field(None, description='Product URL.')
    date_created: Optional[str] = Field(
        None, description="The date the product was created, in the site's timezone."
    )
    date_created_gmt: Optional[str] = Field(
        None, description='The date the product was created, as GMT.'
    )
    date_modified: Optional[str] = Field(
        None,
        description="The date the product was last modified, in the site's timezone.",
    )
    date_modified_gmt: Optional[str] = Field(
        None, description='The date the product was last modified, as GMT.'
    )
    type: Optional[Type1] = Field(None, description='Product type.')
    status: Optional[Status2] = Field(None, description='Product status (post status).')
    featured: Optional[bool] = Field(None, description='Featured product.')
    catalog_visibility: Optional[CatalogVisibility] = Field(
        None, description='Catalog visibility.'
    )
    description: Optional[str] = Field(None, description='Product description.')
    short_description: Optional[str] = Field(
        None, description='Product short description.'
    )
    sku: Optional[str] = Field(None, description='Unique identifier.')
    price: Optional[str] = Field(None, description='Current product price.')
    regular_price: Optional[str] = Field(None, description='Product regular price.')
    sale_price: Optional[str] = Field(None, description='Product sale price.')
    date_on_sale_from: Optional[str] = Field(
        None, description="Start date of sale price, in the site's timezone."
    )
    date_on_sale_from_gmt: Optional[str] = Field(
        None, description='Start date of sale price, as GMT.'
    )
    date_on_sale_to: Optional[str] = Field(
        None, description="End date of sale price, in the site's timezone."
    )
    date_on_sale_to_gmt: Optional[str] = Field(
        None, description="End date of sale price, in the site's timezone."
    )
    price_html: Optional[str] = Field(None, description='Price formatted in HTML.')
    on_sale: Optional[bool] = Field(
        None, description='Shows if the product is on sale.'
    )
    purchasable: Optional[bool] = Field(
        None, description='Shows if the product can be bought.'
    )
    total_sales: Optional[int] = Field(None, description='Amount of sales.')
    virtual: Optional[bool] = Field(None, description='If the product is virtual.')
    downloadable: Optional[bool] = Field(
        None, description='If the product is downloadable.'
    )
    downloads: Optional[List[Download]] = Field(
        None, description='List of downloadable files.'
    )
    download_limit: Optional[int] = Field(
        None,
        description='Number of times downloadable files can be downloaded after purchase.',
    )
    download_expiry: Optional[int] = Field(
        None, description='Number of days until access to downloadable files expires.'
    )
    external_url: Optional[AnyUrl] = Field(
        None, description='Product external URL. Only for external products.'
    )
    button_text: Optional[str] = Field(
        None, description='Product external button text. Only for external products.'
    )
    tax_status: Optional[TaxStatus1] = Field(None, description='Tax status.')
    tax_class: Optional[str] = Field(None, description='Tax class.')
    manage_stock: Optional[bool] = Field(
        None, description='Stock management at product level.'
    )
    stock_quantity: Optional[int] = Field(None, description='Stock quantity.')
    stock_status: Optional[StockStatus] = Field(
        None, description='Controls the stock status of the product.'
    )
    backorders: Optional[Backorders] = Field(
        None, description='If managing stock, this controls if backorders are allowed.'
    )
    backorders_allowed: Optional[bool] = Field(
        None, description='Shows if backorders are allowed.'
    )
    backordered: Optional[bool] = Field(
        None, description='Shows if the product is on backordered.'
    )
    low_stock_amount: Optional[int] = Field(
        None, description='Low Stock amount for the product.'
    )
    sold_individually: Optional[bool] = Field(
        None, description='Allow one item to be bought in a single order.'
    )
    weight: Optional[str] = Field(None, description='Product weight (kg).')
    dimensions: Optional[Dimensions] = Field(None, description='Product dimensions.')
    shipping_required: Optional[bool] = Field(
        None, description='Shows if the product need to be shipped.'
    )
    shipping_taxable: Optional[bool] = Field(
        None, description='Shows whether or not the product shipping is taxable.'
    )
    shipping_class: Optional[str] = Field(None, description='Shipping class slug.')
    shipping_class_id: Optional[str] = Field(None, description='Shipping class ID.')
    reviews_allowed: Optional[bool] = Field(None, description='Allow reviews.')
    average_rating: Optional[str] = Field(None, description='Reviews average rating.')
    rating_count: Optional[int] = Field(
        None, description='Amount of reviews that the product have.'
    )
    related_ids: Optional[List[int]] = Field(
        None, description='List of related products IDs.'
    )
    upsell_ids: Optional[List[int]] = Field(
        None, description='List of up-sell products IDs.'
    )
    cross_sell_ids: Optional[List[int]] = Field(
        None, description='List of cross-sell products IDs.'
    )
    parent_id: Optional[int] = Field(None, description='Product parent ID.')
    purchase_note: Optional[str] = Field(
        None, description='Optional note to send the customer after purchase.'
    )
    categories: Optional[List[Category]] = Field(
        None, description='List of categories.'
    )
    tags: Optional[List[Tag]] = Field(None, description='List of tags.')
    images: Optional[List[Image]] = Field(None, description='List of images.')
    attributes: Optional[List[Attribute]] = Field(
        None, description='List of attributes.'
    )
    default_attributes: Optional[List[DefaultAttribute]] = Field(
        None, description='Defaults variation attributes.'
    )
    variations: Optional[List[int]] = Field(None, description='List of variations IDs.')
    grouped_products: Optional[List[int]] = Field(
        None, description='List of grouped products ID.'
    )
    menu_order: Optional[int] = Field(
        None, description='Menu order, used to custom sort products.'
    )
    meta_data: Optional[List[MetaDatum6]] = Field(None, description='Meta data.')


class Status3(Enum):
    draft = 'draft'
    pending = 'pending'
    private = 'private'
    publish = 'publish'


class Dimensions1(BaseModel):
    length: Optional[str] = Field(None, description='Variation length (cm).')
    width: Optional[str] = Field(None, description='Variation width (cm).')
    height: Optional[str] = Field(None, description='Variation height (cm).')


class Attribute1(BaseModel):
    id: Optional[int] = Field(None, description='Attribute ID.')
    name: Optional[str] = Field(None, description='Attribute name.')
    option: Optional[str] = Field(None, description='Selected attribute term name.')


class ProductVariation(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    date_created: Optional[str] = Field(
        None, description="The date the variation was created, in the site's timezone."
    )
    date_modified: Optional[str] = Field(
        None,
        description="The date the variation was last modified, in the site's timezone.",
    )
    description: Optional[str] = Field(None, description='Variation description.')
    permalink: Optional[AnyUrl] = Field(None, description='Variation URL.')
    sku: Optional[str] = Field(None, description='Unique identifier.')
    price: Optional[str] = Field(None, description='Current variation price.')
    regular_price: Optional[str] = Field(None, description='Variation regular price.')
    sale_price: Optional[str] = Field(None, description='Variation sale price.')
    date_on_sale_from: Optional[str] = Field(
        None, description="Start date of sale price, in the site's timezone."
    )
    date_on_sale_from_gmt: Optional[str] = Field(
        None, description='Start date of sale price, as GMT.'
    )
    date_on_sale_to: Optional[str] = Field(
        None, description="End date of sale price, in the site's timezone."
    )
    date_on_sale_to_gmt: Optional[str] = Field(
        None, description="End date of sale price, in the site's timezone."
    )
    on_sale: Optional[bool] = Field(
        None, description='Shows if the variation is on sale.'
    )
    status: Optional[Status3] = Field(None, description='Variation status.')
    purchasable: Optional[bool] = Field(
        None, description='Shows if the variation can be bought.'
    )
    virtual: Optional[bool] = Field(None, description='If the variation is virtual.')
    downloadable: Optional[bool] = Field(
        None, description='If the variation is downloadable.'
    )
    downloads: Optional[List[Download]] = Field(
        None, description='List of downloadable files.'
    )
    download_limit: Optional[int] = Field(
        None,
        description='Number of times downloadable files can be downloaded after purchase.',
    )
    download_expiry: Optional[int] = Field(
        None, description='Number of days until access to downloadable files expires.'
    )
    tax_status: Optional[TaxStatus1] = Field(None, description='Tax status.')
    tax_class: Optional[str] = Field(None, description='Tax class.')
    manage_stock: Optional[bool] = Field(
        None, description='Stock management at variation level.'
    )
    stock_quantity: Optional[int] = Field(None, description='Stock quantity.')
    stock_status: Optional[StockStatus] = Field(
        None, description='Controls the stock status of the product.'
    )
    backorders: Optional[Backorders] = Field(
        None, description='If managing stock, this controls if backorders are allowed.'
    )
    backorders_allowed: Optional[bool] = Field(
        None, description='Shows if backorders are allowed.'
    )
    backordered: Optional[bool] = Field(
        None, description='Shows if the variation is on backordered.'
    )
    low_stock_amount: Optional[int] = Field(
        None, description='Low Stock amount for the variation.'
    )
    weight: Optional[str] = Field(None, description='Variation weight (kg).')
    dimensions: Optional[Dimensions1] = Field(None, description='Variation dimensions.')
    shipping_class: Optional[str] = Field(None, description='Shipping class slug.')
    shipping_class_id: Optional[str] = Field(None, description='Shipping class ID.')
    image: Optional[Image] = Field(None, description='Variation image data.')
    attributes: Optional[List[Attribute1]] = Field(
        None, description='List of attributes.'
    )
    menu_order: Optional[int] = Field(
        None, description='Menu order, used to custom sort products.'
    )
    meta_data: Optional[List[MetaDatum6]] = Field(None, description='Meta data.')


class SalesReport(BaseModel):
    total_sales: Optional[str] = Field(None, description='Gross sales in the period.')
    net_sales: Optional[str] = Field(None, description='Net sales in the period.')
    average_sales: Optional[str] = Field(None, description='Average net daily sales.')
    total_orders: Optional[int] = Field(None, description='Total of orders placed.')
    total_items: Optional[int] = Field(None, description='Total of items purchased.')
    total_tax: Optional[str] = Field(None, description='Total charged for taxes.')
    total_shipping: Optional[str] = Field(
        None, description='Total charged for shipping.'
    )
    total_refunds: Optional[int] = Field(None, description='Total of refunded orders.')
    total_discount: Optional[int] = Field(None, description='Total of coupons used.')
    totals_grouped_by: Optional[str] = Field(None, description='Group type.')
    totals: Optional[List[int]] = Field(None, description='Totals.')


class TopSellersReport(BaseModel):
    name: Optional[str] = Field(None, description='Product name.')
    product_id: Optional[int] = Field(None, description='Product ID.')
    quantity: Optional[int] = Field(None, description='Total number of purchases.')


class ReportOrderTotal(BaseModel):
    slug: Optional[str] = Field(
        None, description='An alphanumeric identifier for the resource.'
    )
    name: Optional[str] = Field(None, description='Order status name.')
    total: Optional[str] = Field(None, description='Amount of orders.')


class ReportProductTotal(BaseModel):
    slug: Optional[str] = Field(
        None, description='An alphanumeric identifier for the resource.'
    )
    name: Optional[str] = Field(None, description='Product type name.')
    total: Optional[str] = Field(None, description='Amount of products.')


class ReportCustomerTotal(BaseModel):
    slug: Optional[str] = Field(
        None, description='An alphanumeric identifier for the resource.'
    )
    name: Optional[str] = Field(None, description='Customer type name.')
    total: Optional[str] = Field(None, description='Amount of customers.')


class ReportCouponTotal(BaseModel):
    slug: Optional[str] = Field(
        None, description='An alphanumeric identifier for the resource.'
    )
    name: Optional[str] = Field(None, description='Coupon type name.')
    total: Optional[str] = Field(None, description='Amount of coupons.')


class ReportReviewTotal(BaseModel):
    slug: Optional[str] = Field(
        None, description='An alphanumeric identifier for the resource.'
    )
    name: Optional[str] = Field(None, description='Review type name.')
    total: Optional[str] = Field(None, description='Amount of reviews.')


class Report(BaseModel):
    slug: Optional[str] = Field(
        None, description='An alphanumeric identifier for the resource.'
    )
    description: Optional[str] = Field(
        None, description='A human-readable description of the resource.'
    )


class SettingGroup(BaseModel):
    id: Optional[str] = Field(
        None,
        description='A unique identifier that can be used to link settings together.',
    )
    label: Optional[str] = Field(
        None, description='A human readable label for the setting used in interfaces.'
    )
    description: Optional[str] = Field(
        None,
        description='A human readable description for the setting used in interfaces.',
    )
    parent_id: Optional[str] = Field(None, description='ID of parent grouping.')
    sub_groups: Optional[str] = Field(None, description='IDs for settings sub groups.')


class Type2(Enum):
    text = 'text'
    email = 'email'
    number = 'number'
    color = 'color'
    password = 'password'
    textarea = 'textarea'
    select = 'select'
    multiselect = 'multiselect'
    radio = 'radio'
    image_width = 'image_width'
    checkbox = 'checkbox'


class Setting(BaseModel):
    id: Optional[str] = Field(None, description='A unique identifier for the setting.')
    group_id: Optional[str] = Field(
        None, description='An identifier for the group this setting belongs to.'
    )
    label: Optional[str] = Field(
        None, description='A human readable label for the setting used in interfaces.'
    )
    description: Optional[str] = Field(
        None,
        description='A human readable description for the setting used in interfaces.',
    )
    value: Optional[str] = Field(None, description='Setting value.')
    default: Optional[str] = Field(None, description='Default value for the setting.')
    tip: Optional[str] = Field(
        None, description='Additional help text shown to the user about the setting.'
    )
    placeholder: Optional[str] = Field(
        None, description='Placeholder text to be displayed in text inputs.'
    )
    type: Optional[Type2] = Field(None, description='Type of setting.')
    options: Optional[Dict[str, Any]] = Field(
        None,
        description='Array of options (key value pairs) for inputs such as select, multiselect, and radio buttons.',
    )


class ShippingZone(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    name: Optional[str] = Field(None, description='Shipping zone name.')
    order: Optional[int] = Field(None, description='Shipping zone order.')


class Type3(Enum):
    postcode = 'postcode'
    state = 'state'
    country = 'country'
    continent = 'continent'


class ShippingZoneLocation(BaseModel):
    code: Optional[str] = Field(None, description='Shipping zone location code.')
    type: Optional[Type3] = Field(None, description='Shipping zone location type.')


class Type4(Enum):
    text = 'text'
    email = 'email'
    number = 'number'
    color = 'color'
    password = 'password'
    textarea = 'textarea'
    select = 'select'
    multiselect = 'multiselect'
    radio = 'radio'
    image_width = 'image_width'
    checkbox = 'checkbox'
    class_ = 'class'
    order = 'order'


class Settings(BaseModel):
    id: Optional[str] = Field(None, description='A unique identifier for the setting.')
    label: Optional[str] = Field(
        None, description='A human readable label for the setting used in interfaces.'
    )
    description: Optional[str] = Field(
        None,
        description='A human readable description for the setting used in interfaces.',
    )
    type: Optional[Type4] = Field(None, description='Type of setting.')
    value: Optional[str] = Field(None, description='Setting value.')
    default: Optional[str] = Field(None, description='Default value for the setting.')
    tip: Optional[str] = Field(
        None, description='Additional help text shown to the user about the setting.'
    )
    placeholder: Optional[str] = Field(
        None, description='Placeholder text to be displayed in text inputs.'
    )


class ShippingZoneMethod(BaseModel):
    id: Optional[int] = Field(None, description='Shipping method instance ID.')
    instance_id: Optional[int] = Field(None, description='Shipping method instance ID.')
    title: Optional[str] = Field(
        None, description='Shipping method customer facing title.'
    )
    order: Optional[int] = Field(None, description='Shipping method sort order.')
    enabled: Optional[bool] = Field(None, description='Shipping method enabled status.')
    method_id: Optional[str] = Field(None, description='Shipping method ID.')
    method_title: Optional[str] = Field(None, description='Shipping method title.')
    method_description: Optional[str] = Field(
        None, description='Shipping method description.'
    )
    settings: Optional[Settings] = Field(None, description='Shipping method settings.')


class TaxClass(BaseModel):
    slug: Optional[str] = Field(None, description='Unique identifier for the resource.')
    name: str = Field(..., description='Tax class name.')


class Class(Enum):
    standard = 'standard'
    reduced_rate = 'reduced-rate'
    zero_rate = 'zero-rate'


class Tax4(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    country: Optional[str] = Field(None, description='Country ISO 3166 code.')
    state: Optional[str] = Field(None, description='State code.')
    postcode: Optional[str] = Field(
        None,
        description="Postcode/ZIP, it doesn't support multiple values. Deprecated as of WooCommerce 5.3, 'postcodes' should be used instead.",
    )
    city: Optional[str] = Field(
        None,
        description="City name, it doesn't support multiple values. Deprecated as of WooCommerce 5.3, 'cities' should be used instead.",
    )
    rate: Optional[str] = Field(None, description='Tax rate.')
    name: Optional[str] = Field(None, description='Tax rate name.')
    priority: Optional[int] = Field(None, description='Tax priority.')
    compound: Optional[bool] = Field(
        None, description='Whether or not this is a compound rate.'
    )
    shipping: Optional[bool] = Field(
        None, description='Whether or not this tax rate also gets applied to shipping.'
    )
    order: Optional[int] = Field(
        None, description='Indicates the order that will appear in queries.'
    )
    class_: Optional[Class] = Field(None, alias='class', description='Tax class.')
    postcodes: Optional[List[str]] = Field(
        None, description='List of postcodes / ZIPs. Introduced in WooCommerce 5.3.'
    )
    cities: Optional[List[str]] = Field(
        None, description='List of city names. Introduced in WooCommerce 5.3.'
    )


class Status4(Enum):
    active = 'active'
    paused = 'paused'
    disabled = 'disabled'


class Webhook(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier for the resource.')
    name: Optional[str] = Field(None, description='A friendly name for the webhook.')
    status: Optional[Status4] = Field(None, description='Webhook status.')
    topic: Optional[str] = Field(None, description='Webhook topic.')
    resource: Optional[str] = Field(None, description='Webhook resource.')
    event: Optional[str] = Field(None, description='Webhook event.')
    hooks: Optional[List[str]] = Field(
        None, description='WooCommerce action names associated with the webhook.'
    )
    delivery_url: Optional[AnyUrl] = Field(
        None, description='The URL where the webhook payload is delivered.'
    )
    secret: Optional[str] = Field(
        None,
        description="Secret key used to generate a hash of the delivered webhook and provided in the request headers. This will default to a MD5 hash from the current user's ID|username if not provided.",
    )
    date_created: Optional[str] = Field(
        None, description="The date the webhook was created, in the site's timezone."
    )
    date_created_gmt: Optional[str] = Field(
        None, description='The date the webhook was created, as GMT.'
    )
    date_modified: Optional[str] = Field(
        None,
        description="The date the webhook was last modified, in the site's timezone.",
    )
    date_modified_gmt: Optional[str] = Field(
        None, description='The date the webhook was last modified, as GMT.'
    )


class Environment(BaseModel):
    home_url: Optional[AnyUrl] = Field(None, description='Home URL.')
    site_url: Optional[AnyUrl] = Field(None, description='Site URL.')
    version: Optional[str] = Field(None, description='WooCommerce version.')
    log_directory: Optional[str] = Field(None, description='Log directory.')
    log_directory_writable: Optional[bool] = Field(
        None, description='Is log directory writable?'
    )
    wp_version: Optional[str] = Field(None, description='WordPress version.')
    wp_multisite: Optional[bool] = Field(None, description='Is WordPress multisite?')
    wp_memory_limit: Optional[int] = Field(None, description='WordPress memory limit.')
    wp_debug_mode: Optional[bool] = Field(
        None, description='Is WordPress debug mode active?'
    )
    wp_cron: Optional[bool] = Field(
        None, description='Are WordPress cron jobs enabled?'
    )
    language: Optional[str] = Field(None, description='WordPress language.')
    server_info: Optional[str] = Field(None, description='Server info.')
    php_version: Optional[str] = Field(None, description='PHP version.')
    php_post_max_size: Optional[int] = Field(None, description='PHP post max size.')
    php_max_execution_time: Optional[int] = Field(
        None, description='PHP max execution time.'
    )
    php_max_input_vars: Optional[int] = Field(None, description='PHP max input vars.')
    curl_version: Optional[str] = Field(None, description='cURL version.')
    suhosin_installed: Optional[bool] = Field(None, description='Is SUHOSIN installed?')
    max_upload_size: Optional[int] = Field(None, description='Max upload size.')
    mysql_version: Optional[str] = Field(None, description='MySQL version.')
    mysql_version_string: Optional[str] = Field(
        None, description='MySQL version string.'
    )
    default_timezone: Optional[str] = Field(None, description='Default timezone.')
    fsockopen_or_curl_enabled: Optional[bool] = Field(
        None, description='Is fsockopen/cURL enabled?'
    )
    soapclient_enabled: Optional[bool] = Field(
        None, description='Is SoapClient class enabled?'
    )
    domdocument_enabled: Optional[bool] = Field(
        None, description='Is DomDocument class enabled?'
    )
    gzip_enabled: Optional[bool] = Field(None, description='Is GZip enabled?')
    mbstring_enabled: Optional[bool] = Field(None, description='Is mbstring enabled?')
    remote_post_successful: Optional[bool] = Field(
        None, description='Remote POST successful?'
    )
    remote_post_response: Optional[str] = Field(
        None, description='Remote POST response.'
    )
    remote_get_successful: Optional[bool] = Field(
        None, description='Remote GET successful?'
    )
    remote_get_response: Optional[str] = Field(None, description='Remote GET response.')


class Database(BaseModel):
    wc_database_version: Optional[str] = Field(None, description='WC database version.')
    database_prefix: Optional[str] = Field(None, description='Database prefix.')
    maxmind_geoip_database: Optional[str] = Field(
        None, description='MaxMind GeoIP database.'
    )
    database_tables: Optional[List[str]] = Field(None, description='Database tables.')


class Theme(BaseModel):
    name: Optional[str] = Field(None, description='Theme name.')
    version: Optional[str] = Field(None, description='Theme version.')
    version_latest: Optional[str] = Field(None, description='Latest version of theme.')
    author_url: Optional[AnyUrl] = Field(None, description='Theme author URL.')
    is_child_theme: Optional[bool] = Field(
        None, description='Is this theme a child theme?'
    )
    has_woocommerce_support: Optional[bool] = Field(
        None, description='Does the theme declare WooCommerce support?'
    )
    has_woocommerce_file: Optional[bool] = Field(
        None, description='Does the theme have a woocommerce.php file?'
    )
    has_outdated_templates: Optional[bool] = Field(
        None, description='Does this theme have outdated templates?'
    )
    overrides: Optional[List[str]] = Field(None, description='Template overrides.')
    parent_name: Optional[str] = Field(None, description='Parent theme name.')
    parent_version: Optional[str] = Field(None, description='Parent theme version.')
    parent_author_url: Optional[AnyUrl] = Field(
        None, description='Parent theme author URL.'
    )


class Settings1(BaseModel):
    api_enabled: Optional[bool] = Field(None, description='REST API enabled?')
    force_ssl: Optional[bool] = Field(None, description='SSL forced?')
    currency: Optional[str] = Field(None, description='Currency.')
    currency_symbol: Optional[str] = Field(None, description='Currency symbol.')
    currency_position: Optional[str] = Field(None, description='Currency position.')
    thousand_separator: Optional[str] = Field(None, description='Thousand separator.')
    decimal_separator: Optional[str] = Field(None, description='Decimal separator.')
    number_of_decimals: Optional[int] = Field(None, description='Number of decimals.')
    geolocation_enabled: Optional[bool] = Field(
        None, description='Geolocation enabled?'
    )
    taxonomies: Optional[List[str]] = Field(
        None, description='Taxonomy terms for product/order statuses.'
    )
    product_visibility_terms: Optional[List[str]] = Field(
        None, description='Terms in the product visibility taxonomy.'
    )


class Security(BaseModel):
    secure_connection: Optional[bool] = Field(
        None, description='Is the connection to your store secure?'
    )
    hide_errors: Optional[bool] = Field(None, description='Hide errors from visitors?')


class SystemStatus(BaseModel):
    environment: Optional[Environment] = Field(None, description='Environment.')
    database: Optional[Database] = Field(None, description='Database.')
    active_plugins: Optional[List[str]] = Field(None, description='Active plugins.')
    inactive_plugins: Optional[List[str]] = Field(None, description='Inactive plugins.')
    dropins_mu_plugins: Optional[List[str]] = Field(
        None, description='Dropins & MU plugins.'
    )
    theme: Optional[Theme] = Field(None, description='Theme.')
    settings: Optional[Settings1] = Field(None, description='Settings.')
    security: Optional[Security] = Field(None, description='Security.')
    pages: Optional[List[str]] = Field(None, description='WooCommerce pages.')
    post_type_counts: Optional[List[str]] = Field(None, description='Total post count.')


class SystemStatusTool(BaseModel):
    id: Optional[str] = Field(None, description='A unique identifier for the tool.')
    name: Optional[str] = Field(None, description='Tool name.')
    action: Optional[str] = Field(None, description='What running the tool will do.')
    description: Optional[str] = Field(None, description='Tool description.')
    success: Optional[bool] = Field(None, description='Did the tool run successfully?')
    message: Optional[str] = Field(None, description='Tool return message.')


class ShippingMethod(BaseModel):
    id: Optional[str] = Field(None, description='Method ID.')
    title: Optional[str] = Field(None, description='Shipping method title.')
    description: Optional[str] = Field(None, description='Shipping method description.')


class Type5(Enum):
    text = 'text'
    email = 'email'
    number = 'number'
    color = 'color'
    password = 'password'
    textarea = 'textarea'
    select = 'select'
    multiselect = 'multiselect'
    radio = 'radio'
    image_width = 'image_width'
    checkbox = 'checkbox'


class Settings2(BaseModel):
    id: Optional[str] = Field(None, description='A unique identifier for the setting.')
    label: Optional[str] = Field(
        None, description='A human readable label for the setting used in interfaces.'
    )
    description: Optional[str] = Field(
        None,
        description='A human readable description for the setting used in interfaces.',
    )
    type: Optional[Type5] = Field(None, description='Type of setting.')
    value: Optional[str] = Field(None, description='Setting value.')
    default: Optional[str] = Field(None, description='Default value for the setting.')
    tip: Optional[str] = Field(
        None, description='Additional help text shown to the user about the setting.'
    )
    placeholder: Optional[str] = Field(
        None, description='Placeholder text to be displayed in text inputs.'
    )


class PaymentGateway(BaseModel):
    id: Optional[str] = Field(None, description='Payment gateway ID.')
    title: Optional[str] = Field(None, description='Payment gateway title on checkout.')
    description: Optional[str] = Field(
        None, description='Payment gateway description on checkout.'
    )
    order: Optional[int] = Field(None, description='Payment gateway sort order.')
    enabled: Optional[bool] = Field(None, description='Payment gateway enabled status.')
    method_title: Optional[str] = Field(
        None, description='Payment gateway method title.'
    )
    method_description: Optional[str] = Field(
        None, description='Payment gateway method description.'
    )
    method_supports: Optional[List[str]] = Field(
        None, description='Supported features for this payment gateway.'
    )
    settings: Optional[Settings2] = Field(None, description='Payment gateway settings.')


class DataIndex(BaseModel):
    slug: Optional[str] = Field(None, description='Data resource ID.')
    description: Optional[str] = Field(None, description='Data resource description.')


class State(BaseModel):
    code: Optional[str] = Field(None, description='State code.')
    name: Optional[str] = Field(None, description='Full name of state.')


class Country(BaseModel):
    code: Optional[str] = Field(None, description='ISO3166 alpha-2 country code.')
    currency_code: Optional[str] = Field(
        None, description='Default ISO4127 alpha-3 currency code for the country.'
    )
    currency_pos: Optional[str] = Field(
        None, description='Currency symbol position for this country.'
    )
    decimal_sep: Optional[str] = Field(
        None, description='Decimal separator for displayed prices for this country.'
    )
    dimension_unit: Optional[str] = Field(
        None, description='The unit lengths are defined in for this country.'
    )
    name: Optional[str] = Field(None, description='Full name of country.')
    num_decimals: Optional[int] = Field(
        None,
        description='Number of decimal points shown in displayed prices for this country.',
    )
    states: Optional[List[State]] = Field(
        None, description='List of states in this country.'
    )
    thousand_sep: Optional[str] = Field(
        None, description='Thousands separator for displayed prices in this country.'
    )
    weight_unit: Optional[str] = Field(
        None, description='The unit weights are defined in for this country.'
    )


class DataContinents(BaseModel):
    code: Optional[str] = Field(None, description='2 character continent code.')
    name: Optional[str] = Field(None, description='Full name of continent.')
    countries: Optional[List[Country]] = Field(
        None, description='List of countries on this continent.'
    )


class DataCountries(BaseModel):
    code: Optional[str] = Field(None, description='ISO3166 alpha-2 country code.')
    name: Optional[str] = Field(None, description='Full name of country.')
    states: Optional[List[State]] = Field(
        None, description='List of states in this country.'
    )


class DataCurrencies(BaseModel):
    code: Optional[str] = Field(None, description='ISO4217 currency code.')
    name: Optional[str] = Field(None, description='Full name of currency.')
    symbol: Optional[str] = Field(None, description='Currency symbol.')
